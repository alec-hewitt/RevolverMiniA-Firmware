
RevolverMiniA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee4  08005ee4  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eec  08005eec  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ef0  08005ef0  00015ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000058  08005f48  00020058  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005f48  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010709  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fee  00000000  00000000  0003078d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  000337d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001700e  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011eb3  00000000  00000000  0004b76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009723a  00000000  00000000  0005d621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f485b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004648  00000000  00000000  000f48b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005eb4 	.word	0x08005eb4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	08005eb4 	.word	0x08005eb4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f001 f9ad 	bl	8001830 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8bd 	bl	8000654 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fb5f 	bl	8000b9c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004de:	f000 f9d9 	bl	8000894 <MX_TIM1_Init>
  MX_SPI1_Init();
 80004e2:	f000 f9a1 	bl	8000828 <MX_SPI1_Init>
  MX_I2C1_Init();
 80004e6:	f000 f971 	bl	80007cc <MX_I2C1_Init>
  MX_ADC1_Init();
 80004ea:	f000 f91d 	bl	8000728 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004ee:	f000 fa6d 	bl	80009cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f2:	f000 fab7 	bl	8000a64 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f6:	f000 fb03 	bl	8000b00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  htim1.Instance->CCR1 = 0;
 80004fa:	4b43      	ldr	r3, [pc, #268]	; (8000608 <main+0x13c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = 0;
 8000502:	4b41      	ldr	r3, [pc, #260]	; (8000608 <main+0x13c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = 0;
 800050a:	4b3f      	ldr	r3, [pc, #252]	; (8000608 <main+0x13c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2200      	movs	r2, #0
 8000510:	63da      	str	r2, [r3, #60]	; 0x3c

  // T200 motor constants
  pole_pairs = 14;
 8000512:	4b3e      	ldr	r3, [pc, #248]	; (800060c <main+0x140>)
 8000514:	220e      	movs	r2, #14
 8000516:	601a      	str	r2, [r3, #0]
  phase_e_angle = 360 / (float)pole_pairs;
 8000518:	4b3c      	ldr	r3, [pc, #240]	; (800060c <main+0x140>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000524:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8000610 <main+0x144>
 8000528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800052c:	4b39      	ldr	r3, [pc, #228]	; (8000614 <main+0x148>)
 800052e:	edc3 7a00 	vstr	s15, [r3]
  quantized_e_angle = 360/(6 * (float)pole_pairs);
 8000532:	4b36      	ldr	r3, [pc, #216]	; (800060c <main+0x140>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	ee07 3a90 	vmov	s15, r3
 800053a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800053e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000546:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000610 <main+0x144>
 800054a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <main+0x14c>)
 8000550:	edc3 7a00 	vstr	s15, [r3]
  uq_mag = 0.15;
 8000554:	4b31      	ldr	r3, [pc, #196]	; (800061c <main+0x150>)
 8000556:	4a32      	ldr	r2, [pc, #200]	; (8000620 <main+0x154>)
 8000558:	601a      	str	r2, [r3, #0]

  // initialize I2C
  //ADDR0
  if(HAL_GPIO_ReadPin(GPIOC, ADDR0) == GPIO_PIN_SET){
 800055a:	4b32      	ldr	r3, [pc, #200]	; (8000624 <main+0x158>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	4831      	ldr	r0, [pc, #196]	; (8000628 <main+0x15c>)
 8000564:	f001 ff22 	bl	80023ac <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	d106      	bne.n	800057c <main+0xb0>
	  i2c_addr = (i2c_addr | 0x01);
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <main+0x160>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <main+0x160>)
 800057a:	701a      	strb	r2, [r3, #0]
  }
  //ADDR1
  if(HAL_GPIO_ReadPin(GPIOA, ADDR1) == GPIO_PIN_SET){
 800057c:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <main+0x164>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4619      	mov	r1, r3
 8000584:	482b      	ldr	r0, [pc, #172]	; (8000634 <main+0x168>)
 8000586:	f001 ff11 	bl	80023ac <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d106      	bne.n	800059e <main+0xd2>
  	  i2c_addr = (i2c_addr | 0x02);
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <main+0x160>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <main+0x160>)
 800059c:	701a      	strb	r2, [r3, #0]
  }
  //ADDR2
  if(HAL_GPIO_ReadPin(GPIOB, ADDR2) == GPIO_PIN_SET){
 800059e:	4b26      	ldr	r3, [pc, #152]	; (8000638 <main+0x16c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <main+0x170>)
 80005a8:	f001 ff00 	bl	80023ac <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d106      	bne.n	80005c0 <main+0xf4>
  	  i2c_addr = (i2c_addr | 0x04);
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <main+0x160>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <main+0x160>)
 80005be:	701a      	strb	r2, [r3, #0]
  }

  i2c_addr = 0x22;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0x160>)
 80005c2:	2222      	movs	r2, #34	; 0x22
 80005c4:	701a      	strb	r2, [r3, #0]

  HAL_I2C_EnableListen_IT(&hi2c1);
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <main+0x174>)
 80005c8:	f002 f8f3 	bl	80027b2 <HAL_I2C_EnableListen_IT>

  MX_I2C1_Init();
 80005cc:	f000 f8fe 	bl	80007cc <MX_I2C1_Init>

  // enable listen interrupt
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK){
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <main+0x174>)
 80005d2:	f002 f8ee 	bl	80027b2 <HAL_I2C_EnableListen_IT>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <main+0x114>
      /* Transfer error in reception process */
      Error_Handler();
 80005dc:	f000 fe7e 	bl	80012dc <Error_Handler>
   }

  user_velocity = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <main+0x178>)
 80005e2:	f04f 0200 	mov.w	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
  enable_motor();
 80005e8:	f000 fbd6 	bl	8000d98 <enable_motor>
  initialize_angle();
 80005ec:	f000 fc22 	bl	8000e34 <initialize_angle>

  HAL_TIM_Base_Start_IT(&htim2);
 80005f0:	4815      	ldr	r0, [pc, #84]	; (8000648 <main+0x17c>)
 80005f2:	f004 fabd 	bl	8004b70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80005f6:	4815      	ldr	r0, [pc, #84]	; (800064c <main+0x180>)
 80005f8:	f004 faba 	bl	8004b70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <main+0x184>)
 80005fe:	f004 fab7 	bl	8004b70 <HAL_TIM_Base_Start_IT>

  uint8_t tr = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x13a>
 8000608:	200002d0 	.word	0x200002d0
 800060c:	200002cc 	.word	0x200002cc
 8000610:	43b40000 	.word	0x43b40000
 8000614:	20000180 	.word	0x20000180
 8000618:	200003c4 	.word	0x200003c4
 800061c:	20000228 	.word	0x20000228
 8000620:	3e19999a 	.word	0x3e19999a
 8000624:	200002c8 	.word	0x200002c8
 8000628:	40020800 	.word	0x40020800
 800062c:	20000178 	.word	0x20000178
 8000630:	200002c0 	.word	0x200002c0
 8000634:	40020000 	.word	0x40020000
 8000638:	200003bc 	.word	0x200003bc
 800063c:	40020400 	.word	0x40020400
 8000640:	200001d4 	.word	0x200001d4
 8000644:	20000174 	.word	0x20000174
 8000648:	20000374 	.word	0x20000374
 800064c:	20000230 	.word	0x20000230
 8000650:	20000188 	.word	0x20000188

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fbf8 	bl	8005e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xd0>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006cc:	23c0      	movs	r3, #192	; 0xc0
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fd3b 	bl	8004158 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e8:	f000 fdf8 	bl	80012dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f003 ff9d 	bl	8004648 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000714:	f000 fde2 	bl	80012dc <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800073c:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_ADC1_Init+0xa0>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_Ext_IT11;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800076a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ADC1_Init+0x9c>)
 8000786:	2201      	movs	r2, #1
 8000788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_ADC1_Init+0x9c>)
 800078c:	f001 f8e6 	bl	800195c <HAL_ADC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000796:	f000 fda1 	bl	80012dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800079a:	230a      	movs	r3, #10
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_ADC1_Init+0x9c>)
 80007ac:	f001 f91a 	bl	80019e4 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007b6:	f000 fd91 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000278 	.word	0x20000278
 80007c8:	40012000 	.word	0x40012000

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C1_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_I2C1_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C1_Init+0x50>)
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_I2C1_Init+0x58>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 22;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_I2C1_Init+0x50>)
 80007e4:	2216      	movs	r2, #22
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_I2C1_Init+0x50>)
 80007ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2C1_Init+0x50>)
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2C1_Init+0x50>)
 800080a:	f001 fe1b 	bl	8002444 <HAL_I2C_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 fd62 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001d4 	.word	0x200001d4
 8000820:	40005400 	.word	0x40005400
 8000824:	000186a0 	.word	0x000186a0

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x64>)
 8000854:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0x64>)
 800087a:	f004 f8a1 	bl	80049c0 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 fd2a 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000031c 	.word	0x2000031c
 8000890:	40013000 	.word	0x40013000

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	; 0x48
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 faca 	bl	8005e58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008c6:	4a40      	ldr	r2, [pc, #256]	; (80009c8 <MX_TIM1_Init+0x134>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008d2:	2220      	movs	r2, #32
 80008d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008d8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f0:	4834      	ldr	r0, [pc, #208]	; (80009c4 <MX_TIM1_Init+0x130>)
 80008f2:	f004 f99f 	bl	8004c34 <HAL_TIM_PWM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008fc:	f000 fcee 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000908:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800090c:	4619      	mov	r1, r3
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_TIM1_Init+0x130>)
 8000910:	f005 f984 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800091a:	f000 fcdf 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1600;
 8000922:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000930:	2304      	movs	r3, #4
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <MX_TIM1_Init+0x130>)
 8000946:	f004 fbe1 	bl	800510c <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000950:	f000 fcc4 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2204      	movs	r2, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4819      	ldr	r0, [pc, #100]	; (80009c4 <MX_TIM1_Init+0x130>)
 800095e:	f004 fbd5 	bl	800510c <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000968:	f000 fcb8 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	2208      	movs	r2, #8
 8000972:	4619      	mov	r1, r3
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <MX_TIM1_Init+0x130>)
 8000976:	f004 fbc9 	bl	800510c <HAL_TIM_PWM_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000980:	f000 fcac 	bl	80012dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8000990:	230f      	movs	r3, #15
 8000992:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <MX_TIM1_Init+0x130>)
 80009a8:	f005 f9a6 	bl	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80009b2:	f000 fc93 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b6:	4803      	ldr	r0, [pc, #12]	; (80009c4 <MX_TIM1_Init+0x130>)
 80009b8:	f000 fe46 	bl	8001648 <HAL_TIM_MspPostInit>

}
 80009bc:	bf00      	nop
 80009be:	3748      	adds	r7, #72	; 0x48
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200002d0 	.word	0x200002d0
 80009c8:	40010000 	.word	0x40010000

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009f2:	223f      	movs	r2, #63	; 0x3f
 80009f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM2_Init+0x94>)
 80009fe:	220a      	movs	r2, #10
 8000a00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0e:	4814      	ldr	r0, [pc, #80]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a10:	f004 f85f 	bl	8004ad2 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 fc5f 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a2c:	f004 fc30 	bl	8005290 <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f000 fc51 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_TIM2_Init+0x94>)
 8000a48:	f005 f8e8 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a52:	f000 fc43 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000374 	.word	0x20000374

08000a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a82:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <MX_TIM3_Init+0x98>)
 8000a84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a88:	223f      	movs	r2, #63	; 0x3f
 8000a8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a94:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000aa8:	f004 f813 	bl	8004ad2 <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f000 fc13 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000ac4:	f004 fbe4 	bl	8005290 <HAL_TIM_ConfigClockSource>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fc05 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_TIM3_Init+0x94>)
 8000ae0:	f005 f89c 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000aea:	f000 fbf7 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000230 	.word	0x20000230
 8000afc:	40000400 	.word	0x40000400

08000b00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b1e:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <MX_TIM4_Init+0x98>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b24:	f240 227f 	movw	r2, #639	; 0x27f
 8000b28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b46:	f003 ffc4 	bl	8004ad2 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b50:	f000 fbc4 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b62:	f004 fb95 	bl	8005290 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fbb6 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM4_Init+0x94>)
 8000b7e:	f005 f84d 	bl	8005c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 fba8 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000188 	.word	0x20000188
 8000b98:	40000800 	.word	0x40000800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b67      	ldr	r3, [pc, #412]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a66      	ldr	r2, [pc, #408]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b64      	ldr	r3, [pc, #400]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b60      	ldr	r3, [pc, #384]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a5f      	ldr	r2, [pc, #380]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b5d      	ldr	r3, [pc, #372]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a51      	ldr	r2, [pc, #324]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b4f      	ldr	r3, [pc, #316]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_B_Pin|SD_C_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2150      	movs	r1, #80	; 0x50
 8000c26:	484c      	ldr	r0, [pc, #304]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000c28:	f001 fbd8 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nBRK_B_Pin|nBRK_C_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	21a0      	movs	r1, #160	; 0xa0
 8000c30:	4849      	ldr	r0, [pc, #292]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000c32:	f001 fbd3 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nBRK_A_GPIO_Port, nBRK_A_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3c:	4847      	ldr	r0, [pc, #284]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000c3e:	f001 fbcd 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_A_Pin|STATUS_IND_Pin|ERROR_IND_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8000c48:	4844      	ldr	r0, [pc, #272]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000c4a:	f001 fbc7 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADDR0_Pin CROSS_DET_A_Pin CROSS_DET_B_Pin CROSS_DET_C_Pin */
  GPIO_InitStruct.Pin = ADDR0_Pin|CROSS_DET_A_Pin|CROSS_DET_B_Pin|CROSS_DET_C_Pin;
 8000c4e:	f44f 5307 	mov.w	r3, #8640	; 0x21c0
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	483f      	ldr	r0, [pc, #252]	; (8000d60 <MX_GPIO_Init+0x1c4>)
 8000c64:	f001 fa1e 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OC_MON_Pin ADDR1_Pin */
  GPIO_InitStruct.Pin = OC_MON_Pin|ADDR1_Pin;
 8000c68:	f241 0308 	movw	r3, #4104	; 0x1008
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4836      	ldr	r0, [pc, #216]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000c7e:	f001 fa11 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_B_Pin SD_C_Pin */
  GPIO_InitStruct.Pin = SD_B_Pin|SD_C_Pin;
 8000c82:	2350      	movs	r3, #80	; 0x50
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	482f      	ldr	r0, [pc, #188]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000c9a:	f001 fa03 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : nBRK_B_Pin nBRK_C_Pin */
  GPIO_InitStruct.Pin = nBRK_B_Pin|nBRK_C_Pin;
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ca2:	2311      	movs	r3, #17
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4828      	ldr	r0, [pc, #160]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000cb6:	f001 f9f5 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADDR2_Pin */
  GPIO_InitStruct.Pin = ADDR2_Pin;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADDR2_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000cd0:	f001 f9e8 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nBRK_A_Pin */
  GPIO_InitStruct.Pin = nBRK_A_Pin;
 8000cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cda:	2311      	movs	r3, #17
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nBRK_A_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	481b      	ldr	r0, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000cee:	f001 f9d9 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_A_Pin */
  GPIO_InitStruct.Pin = SD_A_Pin;
 8000cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_A_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000d0c:	f001 f9ca 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IBUS_MON_JMP_Pin */
  GPIO_InitStruct.Pin = IBUS_MON_JMP_Pin;
 8000d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IBUS_MON_JMP_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_GPIO_Init+0x1c4>)
 8000d28:	f001 f9bc 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_IND_Pin ERROR_IND_Pin */
  GPIO_InitStruct.Pin = STATUS_IND_Pin|ERROR_IND_Pin;
 8000d2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000d46:	f001 f9ad 	bl	80020a4 <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40020800 	.word	0x40020800

08000d64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  {
    pi_loop();
  }
  */
  // LEDs & check for stall or other bad condition
  if (htim == &htim4 )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d109      	bne.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
	  // status LED
	  HAL_GPIO_TogglePin (GPIOB, STATUS_IND_Pin);
 8000d74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d78:	4806      	ldr	r0, [pc, #24]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d7a:	f001 fb48 	bl	800240e <HAL_GPIO_TogglePin>

	  // run LED
	  HAL_GPIO_TogglePin (GPIOB, ERROR_IND_Pin);
 8000d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d84:	f001 fb43 	bl	800240e <HAL_GPIO_TogglePin>
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000188 	.word	0x20000188
 8000d94:	40020400 	.word	0x40020400

08000d98 <enable_motor>:
	    	HAL_TIMEx_PWMN_Start(tim_handler, TIM_CHANNEL_3); //
	}

}

void enable_motor(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	// set PWMs to safe states
	htim1.Instance->CCR1 = 0;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <enable_motor+0x90>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // A
 8000da4:	2100      	movs	r1, #0
 8000da6:	4820      	ldr	r0, [pc, #128]	; (8000e28 <enable_motor+0x90>)
 8000da8:	f003 ff94 	bl	8004cd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); // A
 8000dac:	2100      	movs	r1, #0
 8000dae:	481e      	ldr	r0, [pc, #120]	; (8000e28 <enable_motor+0x90>)
 8000db0:	f004 fe2a 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
	htim1.Instance->CCR2 = 0;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <enable_motor+0x90>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // B
 8000dbc:	2104      	movs	r1, #4
 8000dbe:	481a      	ldr	r0, [pc, #104]	; (8000e28 <enable_motor+0x90>)
 8000dc0:	f003 ff88 	bl	8004cd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2); // B
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4818      	ldr	r0, [pc, #96]	; (8000e28 <enable_motor+0x90>)
 8000dc8:	f004 fe1e 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
	htim1.Instance->CCR3 = 0;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <enable_motor+0x90>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // C
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4814      	ldr	r0, [pc, #80]	; (8000e28 <enable_motor+0x90>)
 8000dd8:	f003 ff7c 	bl	8004cd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3); // C
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4812      	ldr	r0, [pc, #72]	; (8000e28 <enable_motor+0x90>)
 8000de0:	f004 fe12 	bl	8005a08 <HAL_TIMEx_PWMN_Start>

	// release brake function and enable drivers
	HAL_GPIO_WritePin(GPIOB, nBRK_A_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <enable_motor+0x94>)
 8000dec:	f001 faf6 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SD_A_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <enable_motor+0x94>)
 8000df8:	f001 faf0 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, nBRK_B_Pin, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2120      	movs	r1, #32
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <enable_motor+0x98>)
 8000e02:	f001 faeb 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SD_B_Pin, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <enable_motor+0x98>)
 8000e0c:	f001 fae6 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, nBRK_C_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4806      	ldr	r0, [pc, #24]	; (8000e30 <enable_motor+0x98>)
 8000e16:	f001 fae1 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SD_C_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <enable_motor+0x98>)
 8000e20:	f001 fadc 	bl	80023dc <HAL_GPIO_WritePin>

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200002d0 	.word	0x200002d0
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020000 	.word	0x40020000

08000e34 <initialize_angle>:

	// TODO: disable drivers

}

void initialize_angle(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	shaft_angle = 0;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <initialize_angle+0x3c>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
	phase_state = 0;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <initialize_angle+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]

	// this will set to phase state = 2 and electrical angle to quant. 1 clockwise
	set_phase_voltages(0.15, 0, quantized_e_angle);
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <initialize_angle+0x44>)
 8000e48:	edd3 7a00 	vldr	s15, [r3]
 8000e4c:	eeb0 1a67 	vmov.f32	s2, s15
 8000e50:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8000e7c <initialize_angle+0x48>
 8000e54:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000e80 <initialize_angle+0x4c>
 8000e58:	f000 f844 	bl	8000ee4 <set_phase_voltages>
	HAL_Delay(4);
 8000e5c:	2004      	movs	r0, #4
 8000e5e:	f000 fd59 	bl	8001914 <HAL_Delay>
	// set this to 0!
	user_velocity = 0;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <initialize_angle+0x50>)
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002c4 	.word	0x200002c4
 8000e74:	200001d0 	.word	0x200001d0
 8000e78:	200003c4 	.word	0x200003c4
 8000e7c:	00000000 	.word	0x00000000
 8000e80:	3e19999a 	.word	0x3e19999a
 8000e84:	20000174 	.word	0x20000174

08000e88 <get_phase>:

	set_phase_voltages(uq_mag, 0, e_angle);

}

int get_phase(float angle){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (int)((angle - (((int)(angle / phase_e_angle)) * phase_e_angle)) / quantized_e_angle) + 1;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <get_phase+0x54>)
 8000e94:	ed93 7a00 	vldr	s14, [r3]
 8000e98:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <get_phase+0x54>)
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eb6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <get_phase+0x58>)
 8000ebc:	ed93 7a00 	vldr	s14, [r3]
 8000ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec8:	ee17 3a90 	vmov	r3, s15
 8000ecc:	3301      	adds	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000180 	.word	0x20000180
 8000ee0:	200003c4 	.word	0x200003c4

08000ee4 <set_phase_voltages>:

// this implements the hardware layer outputs from commutate command
void set_phase_voltages(float Uq, float Ud, float angle){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eee:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ef2:	ed87 1a01 	vstr	s2, [r7, #4]

	// calculate duty cycle
	float dc_set = Uq * 100;
 8000ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000efa:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800117c <set_phase_voltages+0x298>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	edc7 7a05 	vstr	s15, [r7, #20]

	if(angle == 0){
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f12:	d13a      	bne.n	8000f8a <set_phase_voltages+0xa6>
		dc_set = 0;
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
		if(trap_120_map[phase_state - 1][0] == 1){
 8000f1a:	4b99      	ldr	r3, [pc, #612]	; (8001180 <set_phase_voltages+0x29c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	4998      	ldr	r1, [pc, #608]	; (8001184 <set_phase_voltages+0x2a0>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d105      	bne.n	8000f3e <set_phase_voltages+0x5a>
			adjust_PWM_DC(&htim1, 1, dc_set);
 8000f32:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f36:	2101      	movs	r1, #1
 8000f38:	4893      	ldr	r0, [pc, #588]	; (8001188 <set_phase_voltages+0x2a4>)
 8000f3a:	f000 f92d 	bl	8001198 <adjust_PWM_DC>
		}
		if(trap_120_map[phase_state - 1][1] == 1){
 8000f3e:	4b90      	ldr	r3, [pc, #576]	; (8001180 <set_phase_voltages+0x29c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	498f      	ldr	r1, [pc, #572]	; (8001184 <set_phase_voltages+0x2a0>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3304      	adds	r3, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d105      	bne.n	8000f64 <set_phase_voltages+0x80>
			adjust_PWM_DC(&htim1, 2, dc_set);
 8000f58:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	488a      	ldr	r0, [pc, #552]	; (8001188 <set_phase_voltages+0x2a4>)
 8000f60:	f000 f91a 	bl	8001198 <adjust_PWM_DC>
		}
		if(trap_120_map[phase_state - 1][2] == 1){
 8000f64:	4b86      	ldr	r3, [pc, #536]	; (8001180 <set_phase_voltages+0x29c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4986      	ldr	r1, [pc, #536]	; (8001184 <set_phase_voltages+0x2a0>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	440b      	add	r3, r1
 8000f76:	3308      	adds	r3, #8
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <set_phase_voltages+0xa6>
			adjust_PWM_DC(&htim1, 3, dc_set);
 8000f7e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f82:	2103      	movs	r1, #3
 8000f84:	4880      	ldr	r0, [pc, #512]	; (8001188 <set_phase_voltages+0x2a4>)
 8000f86:	f000 f907 	bl	8001198 <adjust_PWM_DC>
		}
	}

	shaft_angle = shaft_angle + angle;
 8000f8a:	4b80      	ldr	r3, [pc, #512]	; (800118c <set_phase_voltages+0x2a8>)
 8000f8c:	ed93 7a00 	vldr	s14, [r3]
 8000f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	4b7c      	ldr	r3, [pc, #496]	; (800118c <set_phase_voltages+0x2a8>)
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
	if(shaft_angle > 360){
 8000f9e:	4b7b      	ldr	r3, [pc, #492]	; (800118c <set_phase_voltages+0x2a8>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001190 <set_phase_voltages+0x2ac>
 8000fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd09      	ble.n	8000fc6 <set_phase_voltages+0xe2>
		shaft_angle = shaft_angle - 360;
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <set_phase_voltages+0x2a8>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001190 <set_phase_voltages+0x2ac>
 8000fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fc0:	4b72      	ldr	r3, [pc, #456]	; (800118c <set_phase_voltages+0x2a8>)
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(shaft_angle < 0){
 8000fc6:	4b71      	ldr	r3, [pc, #452]	; (800118c <set_phase_voltages+0x2a8>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d509      	bpl.n	8000fea <set_phase_voltages+0x106>
		shaft_angle = 360 + shaft_angle;
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	; (800118c <set_phase_voltages+0x2a8>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001190 <set_phase_voltages+0x2ac>
 8000fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe4:	4b69      	ldr	r3, [pc, #420]	; (800118c <set_phase_voltages+0x2a8>)
 8000fe6:	edc3 7a00 	vstr	s15, [r3]
	}

	// get new phase state based on angle
	int new_phase = get_phase(shaft_angle);
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <set_phase_voltages+0x2a8>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	f7ff ff48 	bl	8000e88 <get_phase>
 8000ff8:	6138      	str	r0, [r7, #16]

	// just update duty cycles if no phase change applies
	if(new_phase == phase_state){
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <set_phase_voltages+0x29c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	f000 80b6 	beq.w	8001172 <set_phase_voltages+0x28e>
		return;
	}

	phase_state = new_phase;
 8001006:	4a5e      	ldr	r2, [pc, #376]	; (8001180 <set_phase_voltages+0x29c>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	6013      	str	r3, [r2, #0]

	// switch phase
	switch(trap_120_map[phase_state - 1][0]){
 800100c:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <set_phase_voltages+0x29c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	495c      	ldr	r1, [pc, #368]	; (8001184 <set_phase_voltages+0x2a0>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d007      	beq.n	8001034 <set_phase_voltages+0x150>
 8001024:	2b01      	cmp	r3, #1
 8001026:	dc2c      	bgt.n	8001082 <set_phase_voltages+0x19e>
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d01a      	beq.n	8001064 <set_phase_voltages+0x180>
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <set_phase_voltages+0x16e>
 8001032:	e026      	b.n	8001082 <set_phase_voltages+0x19e>
		case 1:
			adjust_PWM_DC(&htim1, 1, dc_set);
 8001034:	ed97 0a05 	vldr	s0, [r7, #20]
 8001038:	2101      	movs	r1, #1
 800103a:	4853      	ldr	r0, [pc, #332]	; (8001188 <set_phase_voltages+0x2a4>)
 800103c:	f000 f8ac 	bl	8001198 <adjust_PWM_DC>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4851      	ldr	r0, [pc, #324]	; (8001188 <set_phase_voltages+0x2a4>)
 8001044:	f003 fe46 	bl	8004cd4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	484f      	ldr	r0, [pc, #316]	; (8001188 <set_phase_voltages+0x2a4>)
 800104c:	f004 fcdc 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			break;
 8001050:	e017      	b.n	8001082 <set_phase_voltages+0x19e>
		case 0:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	484c      	ldr	r0, [pc, #304]	; (8001188 <set_phase_voltages+0x2a4>)
 8001056:	f003 feed 	bl	8004e34 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800105a:	2100      	movs	r1, #0
 800105c:	484a      	ldr	r0, [pc, #296]	; (8001188 <set_phase_voltages+0x2a4>)
 800105e:	f004 fd7f 	bl	8005b60 <HAL_TIMEx_PWMN_Stop>
			break;
 8001062:	e00e      	b.n	8001082 <set_phase_voltages+0x19e>
		case -1:
			adjust_PWM_DC(&htim1, 1, 0);
 8001064:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001194 <set_phase_voltages+0x2b0>
 8001068:	2101      	movs	r1, #1
 800106a:	4847      	ldr	r0, [pc, #284]	; (8001188 <set_phase_voltages+0x2a4>)
 800106c:	f000 f894 	bl	8001198 <adjust_PWM_DC>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001070:	2100      	movs	r1, #0
 8001072:	4845      	ldr	r0, [pc, #276]	; (8001188 <set_phase_voltages+0x2a4>)
 8001074:	f004 fcc8 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001078:	2100      	movs	r1, #0
 800107a:	4843      	ldr	r0, [pc, #268]	; (8001188 <set_phase_voltages+0x2a4>)
 800107c:	f003 fe2a 	bl	8004cd4 <HAL_TIM_PWM_Start>
			break;
 8001080:	bf00      	nop
	}
	switch(trap_120_map[phase_state - 1][1]){
 8001082:	4b3f      	ldr	r3, [pc, #252]	; (8001180 <set_phase_voltages+0x29c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	493e      	ldr	r1, [pc, #248]	; (8001184 <set_phase_voltages+0x2a0>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3304      	adds	r3, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d007      	beq.n	80010ac <set_phase_voltages+0x1c8>
 800109c:	2b01      	cmp	r3, #1
 800109e:	dc2c      	bgt.n	80010fa <set_phase_voltages+0x216>
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d01a      	beq.n	80010dc <set_phase_voltages+0x1f8>
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00f      	beq.n	80010ca <set_phase_voltages+0x1e6>
 80010aa:	e026      	b.n	80010fa <set_phase_voltages+0x216>
		case 1:
			adjust_PWM_DC(&htim1, 2, dc_set);
 80010ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80010b0:	2102      	movs	r1, #2
 80010b2:	4835      	ldr	r0, [pc, #212]	; (8001188 <set_phase_voltages+0x2a4>)
 80010b4:	f000 f870 	bl	8001198 <adjust_PWM_DC>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010b8:	2104      	movs	r1, #4
 80010ba:	4833      	ldr	r0, [pc, #204]	; (8001188 <set_phase_voltages+0x2a4>)
 80010bc:	f003 fe0a 	bl	8004cd4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010c0:	2104      	movs	r1, #4
 80010c2:	4831      	ldr	r0, [pc, #196]	; (8001188 <set_phase_voltages+0x2a4>)
 80010c4:	f004 fca0 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			break;
 80010c8:	e017      	b.n	80010fa <set_phase_voltages+0x216>
		case 0:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80010ca:	2104      	movs	r1, #4
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <set_phase_voltages+0x2a4>)
 80010ce:	f003 feb1 	bl	8004e34 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80010d2:	2104      	movs	r1, #4
 80010d4:	482c      	ldr	r0, [pc, #176]	; (8001188 <set_phase_voltages+0x2a4>)
 80010d6:	f004 fd43 	bl	8005b60 <HAL_TIMEx_PWMN_Stop>
			break;
 80010da:	e00e      	b.n	80010fa <set_phase_voltages+0x216>
		case -1:
			adjust_PWM_DC(&htim1, 2, 0);
 80010dc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001194 <set_phase_voltages+0x2b0>
 80010e0:	2102      	movs	r1, #2
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <set_phase_voltages+0x2a4>)
 80010e4:	f000 f858 	bl	8001198 <adjust_PWM_DC>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010e8:	2104      	movs	r1, #4
 80010ea:	4827      	ldr	r0, [pc, #156]	; (8001188 <set_phase_voltages+0x2a4>)
 80010ec:	f004 fc8c 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4825      	ldr	r0, [pc, #148]	; (8001188 <set_phase_voltages+0x2a4>)
 80010f4:	f003 fdee 	bl	8004cd4 <HAL_TIM_PWM_Start>
			break;
 80010f8:	bf00      	nop
	}
	switch(trap_120_map[phase_state - 1][2]){
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <set_phase_voltages+0x29c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	4920      	ldr	r1, [pc, #128]	; (8001184 <set_phase_voltages+0x2a0>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3308      	adds	r3, #8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d007      	beq.n	8001124 <set_phase_voltages+0x240>
 8001114:	2b01      	cmp	r3, #1
 8001116:	dc2d      	bgt.n	8001174 <set_phase_voltages+0x290>
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d01a      	beq.n	8001154 <set_phase_voltages+0x270>
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00f      	beq.n	8001142 <set_phase_voltages+0x25e>
 8001122:	e027      	b.n	8001174 <set_phase_voltages+0x290>
		case 1:
			adjust_PWM_DC(&htim1, 3, dc_set);
 8001124:	ed97 0a05 	vldr	s0, [r7, #20]
 8001128:	2103      	movs	r1, #3
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <set_phase_voltages+0x2a4>)
 800112c:	f000 f834 	bl	8001198 <adjust_PWM_DC>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001130:	2108      	movs	r1, #8
 8001132:	4815      	ldr	r0, [pc, #84]	; (8001188 <set_phase_voltages+0x2a4>)
 8001134:	f003 fdce 	bl	8004cd4 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001138:	2108      	movs	r1, #8
 800113a:	4813      	ldr	r0, [pc, #76]	; (8001188 <set_phase_voltages+0x2a4>)
 800113c:	f004 fc64 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			break;
 8001140:	e018      	b.n	8001174 <set_phase_voltages+0x290>
		case 0:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001142:	2108      	movs	r1, #8
 8001144:	4810      	ldr	r0, [pc, #64]	; (8001188 <set_phase_voltages+0x2a4>)
 8001146:	f003 fe75 	bl	8004e34 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 800114a:	2108      	movs	r1, #8
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <set_phase_voltages+0x2a4>)
 800114e:	f004 fd07 	bl	8005b60 <HAL_TIMEx_PWMN_Stop>
			break;
 8001152:	e00f      	b.n	8001174 <set_phase_voltages+0x290>
		case -1:
			adjust_PWM_DC(&htim1, 3, 0);
 8001154:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001194 <set_phase_voltages+0x2b0>
 8001158:	2103      	movs	r1, #3
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <set_phase_voltages+0x2a4>)
 800115c:	f000 f81c 	bl	8001198 <adjust_PWM_DC>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001160:	2108      	movs	r1, #8
 8001162:	4809      	ldr	r0, [pc, #36]	; (8001188 <set_phase_voltages+0x2a4>)
 8001164:	f004 fc50 	bl	8005a08 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001168:	2108      	movs	r1, #8
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <set_phase_voltages+0x2a4>)
 800116c:	f003 fdb2 	bl	8004cd4 <HAL_TIM_PWM_Start>
			break;
 8001170:	e000      	b.n	8001174 <set_phase_voltages+0x290>
		return;
 8001172:	bf00      	nop
	}

}
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	42c80000 	.word	0x42c80000
 8001180:	200001d0 	.word	0x200001d0
 8001184:	20000000 	.word	0x20000000
 8001188:	200002d0 	.word	0x200002d0
 800118c:	200002c4 	.word	0x200002c4
 8001190:	43b40000 	.word	0x43b40000
 8001194:	00000000 	.word	0x00000000

08001198 <adjust_PWM_DC>:


// this implements the actual duty cycle setting blindly (be careful!)
void adjust_PWM_DC(TIM_HandleTypeDef* const pwmHandle, int channel, float DC)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	ed87 0a01 	vstr	s0, [r7, #4]

    /* The duty cycle value is a percentage of the reload register value (ARR). Rounding is used.*/
    uint32_t newRegVal = (uint32_t)roundf((pwmHandle->Instance->ARR) * (DC * 0.01F));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001230 <adjust_PWM_DC+0x98>
 80011bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f004 fe4e 	bl	8005e68 <roundf>
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	617b      	str	r3, [r7, #20]

    /*In case of the DC being calculated as higher than the reload register, cap it to the reload register*/
    if(newRegVal > pwmHandle->Instance->ARR){
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d903      	bls.n	80011ee <adjust_PWM_DC+0x56>
        newRegVal = pwmHandle->Instance->ARR;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	617b      	str	r3, [r7, #20]
    }

    // set the variable for all channels
    ccr_dc = newRegVal;
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <adjust_PWM_DC+0x9c>)
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	6013      	str	r3, [r2, #0]

	//Assign the new DC count to the capture compare register immediately
    switch(channel){
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d011      	beq.n	800121e <adjust_PWM_DC+0x86>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	dc12      	bgt.n	8001226 <adjust_PWM_DC+0x8e>
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d003      	beq.n	800120e <adjust_PWM_DC+0x76>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d004      	beq.n	8001216 <adjust_PWM_DC+0x7e>
		case 2:
			pwmHandle->Instance->CCR2 = newRegVal;
		case 3:
			pwmHandle->Instance->CCR3 = newRegVal;
    }
}
 800120c:	e00b      	b.n	8001226 <adjust_PWM_DC+0x8e>
			pwmHandle->Instance->CCR1 = newRegVal;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
			pwmHandle->Instance->CCR2 = newRegVal;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	639a      	str	r2, [r3, #56]	; 0x38
			pwmHandle->Instance->CCR3 = newRegVal;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	3c23d70a 	.word	0x3c23d70a
 8001234:	2000017c 	.word	0x2000017c

08001238 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <HAL_I2C_ListenCpltCallback+0x18>)
 8001242:	f001 fab6 	bl	80027b2 <HAL_I2C_EnableListen_IT>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001d4 	.word	0x200001d4

08001254 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <HAL_I2C_SlaveTxCpltCallback+0x18>)
 800125e:	f001 faa8 	bl	80027b2 <HAL_I2C_EnableListen_IT>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001d4 	.word	0x200001d4

08001270 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(&hi2c1);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <HAL_I2C_SlaveRxCpltCallback+0x18>)
 800127a:	f001 fa9a 	bl	80027b2 <HAL_I2C_EnableListen_IT>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001d4 	.word	0x200001d4

0800128c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	803b      	strh	r3, [r7, #0]
	//if(AddrMatchCode == 22){
		//HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, , 1, I2C_FIRST_AND_LAST_FRAME);
		//HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, RxBuffer, 1, I2C_NEXT_FRAME);
	//}

	  if( TransferDirection==I2C_DIRECTION_TRANSMIT ) {
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d105      	bne.n	80012ae <HAL_I2C_AddrCallback+0x22>
	      HAL_I2C_Slave_Seq_Receive_IT(hi2c, RxBuffer, 1, I2C_NEXT_FRAME);
 80012a2:	2304      	movs	r3, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	4904      	ldr	r1, [pc, #16]	; (80012b8 <HAL_I2C_AddrCallback+0x2c>)
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f001 fa0f 	bl	80026cc <HAL_I2C_Slave_Seq_Receive_IT>

	  }
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000074 	.word	0x20000074

080012bc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Init(&hi2c1);
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <HAL_I2C_ErrorCallback+0x1c>)
 80012c6:	f001 f8bd 	bl	8002444 <HAL_I2C_Init>
	HAL_I2C_EnableListen_IT(&hi2c1);
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <HAL_I2C_ErrorCallback+0x1c>)
 80012cc:	f001 fa71 	bl	80027b2 <HAL_I2C_EnableListen_IT>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001d4 	.word	0x200001d4

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <HAL_ADC_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_MspInit+0x80>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001392:	2307      	movs	r3, #7
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_ADC_MspInit+0x84>)
 80013a6:	f000 fe7d 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_I2C_MspInit+0xa4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13b      	bne.n	800145a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013fe:	23c0      	movs	r3, #192	; 0xc0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001402:	2312      	movs	r3, #18
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800140e:	2304      	movs	r3, #4
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4814      	ldr	r0, [pc, #80]	; (800146c <HAL_I2C_MspInit+0xac>)
 800141a:	f000 fe43 	bl	80020a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 8001428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_I2C_MspInit+0xa8>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201f      	movs	r0, #31
 8001440:	f000 fdc9 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001444:	201f      	movs	r0, #31
 8001446:	f000 fde2 	bl	800200e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2020      	movs	r0, #32
 8001450:	f000 fdc1 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001454:	2020      	movs	r0, #32
 8001456:	f000 fdda 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_SPI_MspInit+0xc0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d14a      	bne.n	8001528 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 800149c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1f      	ldr	r2, [pc, #124]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a18      	ldr	r2, [pc, #96]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_SPI_MspInit+0xc4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f8:	2305      	movs	r3, #5
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_SPI_MspInit+0xc8>)
 8001504:	f000 fdce 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001508:	2338      	movs	r3, #56	; 0x38
 800150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001518:	2305      	movs	r3, #5
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_SPI_MspInit+0xcc>)
 8001524:	f000 fdbe 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40013000 	.word	0x40013000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_TIM_PWM_MspInit+0x3c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10d      	bne.n	800156e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_PWM_MspInit+0x40>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_PWM_MspInit+0x40>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_PWM_MspInit+0x40>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d116      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b25      	ldr	r3, [pc, #148]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201c      	movs	r0, #28
 80015b8:	f000 fd0d 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015bc:	201c      	movs	r0, #28
 80015be:	f000 fd26 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015c2:	e036      	b.n	8001632 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_TIM_Base_MspInit+0xbc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d116      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201d      	movs	r0, #29
 80015f0:	f000 fcf1 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f4:	201d      	movs	r0, #29
 80015f6:	f000 fd0a 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 80015fa:	e01a      	b.n	8001632 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a10      	ldr	r2, [pc, #64]	; (8001644 <HAL_TIM_Base_MspInit+0xc0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d115      	bne.n	8001632 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_TIM_Base_MspInit+0xb8>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201e      	movs	r0, #30
 8001628:	f000 fcd5 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800162c:	201e      	movs	r0, #30
 800162e:	f000 fcee 	bl	800200e <HAL_NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40000400 	.word	0x40000400
 8001644:	40000800 	.word	0x40000800

08001648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_TIM_MspPostInit+0xa8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d13d      	bne.n	80016e6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_TIM_MspPostInit+0xac>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80016a2:	f242 0303 	movw	r3, #8195	; 0x2003
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <HAL_TIM_MspPostInit+0xb0>)
 80016c0:	f000 fcf0 	bl	80020a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_TIM_MspPostInit+0xb4>)
 80016e2:	f000 fcdf 	bl	80020a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020000 	.word	0x40020000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f8c2 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <TIM2_IRQHandler+0x10>)
 800175a:	f003 fbcf 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000374 	.word	0x20000374

08001768 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <TIM3_IRQHandler+0x10>)
 800176e:	f003 fbc5 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000230 	.word	0x20000230

0800177c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM4_IRQHandler+0x10>)
 8001782:	f003 fbbb 	bl	8004efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000188 	.word	0x20000188

08001790 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <I2C1_EV_IRQHandler+0x10>)
 8001796:	f001 f842 	bl	800281e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001d4 	.word	0x200001d4

080017a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <I2C1_ER_IRQHandler+0x10>)
 80017aa:	f001 f9a9 	bl	8002b00 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001d4 	.word	0x200001d4

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f8:	4c0b      	ldr	r4, [pc, #44]	; (8001828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001806:	f7ff ffd7 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f004 fb01 	bl	8005e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7fe fe5d 	bl	80004cc <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001820:	08005ef4 	.word	0x08005ef4
  ldr r2, =_sbss
 8001824:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001828:	200003d4 	.word	0x200003d4

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fbb1 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fd40 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fbc9 	bl	800202a <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 fb91 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000048 	.word	0x20000048
 80018cc:	20000050 	.word	0x20000050
 80018d0:	2000004c 	.word	0x2000004c

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000050 	.word	0x20000050
 80018f8:	200003d0 	.word	0x200003d0

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200003d0 	.word	0x200003d0

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff ffee 	bl	80018fc <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffde 	bl	80018fc <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000050 	.word	0x20000050

0800195c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e033      	b.n	80019da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fcdc 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d118      	bne.n	80019cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f043 0202 	orr.w	r2, r3, #2
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f93a 	bl	8001c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ca:	e001      	b.n	80019d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1c>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e105      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x228>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b09      	cmp	r3, #9
 8001a0e:	d925      	bls.n	8001a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	3b1e      	subs	r3, #30
 8001a26:	2207      	movs	r2, #7
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4403      	add	r3, r0
 8001a4e:	3b1e      	subs	r3, #30
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	e022      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6919      	ldr	r1, [r3, #16]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	2207      	movs	r2, #7
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6919      	ldr	r1, [r3, #16]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4403      	add	r3, r0
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d824      	bhi.n	8001af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b05      	subs	r3, #5
 8001abc:	221f      	movs	r2, #31
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	400a      	ands	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3b05      	subs	r3, #5
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
 8001af2:	e04c      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b0c      	cmp	r3, #12
 8001afa:	d824      	bhi.n	8001b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b23      	subs	r3, #35	; 0x23
 8001b0e:	221f      	movs	r2, #31
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	3b23      	subs	r3, #35	; 0x23
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
 8001b44:	e023      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b41      	subs	r3, #65	; 0x41
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b41      	subs	r3, #65	; 0x41
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <HAL_ADC_ConfigChannel+0x234>)
 8001b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d109      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b12      	cmp	r3, #18
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <HAL_ADC_ConfigChannel+0x238>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d123      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d003      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x1e6>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b11      	cmp	r3, #17
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b10      	cmp	r3, #16
 8001bdc:	d111      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_ADC_ConfigChannel+0x23c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_ADC_ConfigChannel+0x240>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9a      	lsrs	r2, r3, #18
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf4:	e002      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f9      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	20000048 	.word	0x20000048
 8001c24:	431bde83 	.word	0x431bde83

08001c28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c30:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <ADC_Init+0x1f0>)
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	021a      	lsls	r2, r3, #8
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <ADC_Init+0x1f4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6899      	ldr	r1, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e00f      	b.n	8001d26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0202 	bic.w	r2, r2, #2
 8001d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6899      	ldr	r1, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
 8001d40:	005a      	lsls	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	035a      	lsls	r2, r3, #13
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	e007      	b.n	8001d9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	051a      	lsls	r2, r3, #20
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dde:	025a      	lsls	r2, r3, #9
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	029a      	lsls	r2, r3, #10
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40012300 	.word	0x40012300
 8001e1c:	0f000001 	.word	0x0f000001

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	; (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	; (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	; (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	; 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e00c      	b.n	800207a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002094:	b2db      	uxtb	r3, r3
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e159      	b.n	8002374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8148 	bne.w	800236e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a2 	beq.w	800236e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b57      	ldr	r3, [pc, #348]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a56      	ldr	r2, [pc, #344]	; (800238c <HAL_GPIO_Init+0x2e8>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_GPIO_Init+0x2e8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002246:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a49      	ldr	r2, [pc, #292]	; (8002394 <HAL_GPIO_Init+0x2f0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x202>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_Init+0x2f4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x1fe>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a47      	ldr	r2, [pc, #284]	; (800239c <HAL_GPIO_Init+0x2f8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x1fa>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a46      	ldr	r2, [pc, #280]	; (80023a0 <HAL_GPIO_Init+0x2fc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x1f6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_GPIO_Init+0x300>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x1f2>
 8002292:	2304      	movs	r3, #4
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 8002296:	2307      	movs	r3, #7
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x204>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2ec>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ea:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x304>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x304>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x304>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f aea2 	bls.w	80020c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4013      	ands	r3, r2
 8002426:	041a      	lsls	r2, r3, #16
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43d9      	mvns	r1, r3
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	400b      	ands	r3, r1
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e12b      	b.n	80026ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe ffa8 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a8:	f002 fa76 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 80024ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a81      	ldr	r2, [pc, #516]	; (80026b8 <HAL_I2C_Init+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d807      	bhi.n	80024c8 <HAL_I2C_Init+0x84>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a80      	ldr	r2, [pc, #512]	; (80026bc <HAL_I2C_Init+0x278>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e006      	b.n	80024d6 <HAL_I2C_Init+0x92>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a7d      	ldr	r2, [pc, #500]	; (80026c0 <HAL_I2C_Init+0x27c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e7      	b.n	80026ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a78      	ldr	r2, [pc, #480]	; (80026c4 <HAL_I2C_Init+0x280>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a6a      	ldr	r2, [pc, #424]	; (80026b8 <HAL_I2C_Init+0x274>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d802      	bhi.n	8002518 <HAL_I2C_Init+0xd4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3301      	adds	r3, #1
 8002516:	e009      	b.n	800252c <HAL_I2C_Init+0xe8>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_I2C_Init+0x284>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	3301      	adds	r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800253e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	495c      	ldr	r1, [pc, #368]	; (80026b8 <HAL_I2C_Init+0x274>)
 8002548:	428b      	cmp	r3, r1
 800254a:	d819      	bhi.n	8002580 <HAL_I2C_Init+0x13c>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e59      	subs	r1, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fbb1 f3f3 	udiv	r3, r1, r3
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002560:	400b      	ands	r3, r1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_I2C_Init+0x138>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e59      	subs	r1, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	e051      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 800257c:	2304      	movs	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x168>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x18e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x196>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026e8:	2b28      	cmp	r3, #40	; 0x28
 80026ea:	d15b      	bne.n	80027a4 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e054      	b.n	80027a6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002706:	2302      	movs	r3, #2
 8002708:	e04d      	b.n	80027a6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d007      	beq.n	8002730 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	222a      	movs	r2, #42	; 0x2a
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800279e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d124      	bne.n	8002810 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2228      	movs	r2, #40	; 0x28
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d007      	beq.n	80027ec <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027fa:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800280a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d003      	beq.n	8002856 <HAL_I2C_EV_IRQHandler+0x38>
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	f040 80c1 	bne.w	80029d8 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10d      	bne.n	800288c <HAL_I2C_EV_IRQHandler+0x6e>
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002876:	d003      	beq.n	8002880 <HAL_I2C_EV_IRQHandler+0x62>
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800287e:	d101      	bne.n	8002884 <HAL_I2C_EV_IRQHandler+0x66>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_I2C_EV_IRQHandler+0x68>
 8002884:	2300      	movs	r3, #0
 8002886:	2b01      	cmp	r3, #1
 8002888:	f000 8132 	beq.w	8002af0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00c      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x92>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	0a5b      	lsrs	r3, r3, #9
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f001 fc3c 	bl	8004120 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fd43 	bl	8003334 <I2C_Master_SB>
 80028ae:	e092      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0xb2>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fdb9 	bl	8003440 <I2C_Master_ADD10>
 80028ce:	e082      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d009      	beq.n	80028f0 <HAL_I2C_EV_IRQHandler+0xd2>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	0a5b      	lsrs	r3, r3, #9
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fdd3 	bl	8003494 <I2C_Master_ADDR>
 80028ee:	e072      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03b      	beq.n	8002974 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290a:	f000 80f3 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	09db      	lsrs	r3, r3, #7
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0x11c>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	0a9b      	lsrs	r3, r3, #10
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0x11c>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f9bd 	bl	8002cb2 <I2C_MasterTransmit_TXE>
 8002938:	e04d      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80d6 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80cf 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002956:	7bbb      	ldrb	r3, [r7, #14]
 8002958:	2b21      	cmp	r3, #33	; 0x21
 800295a:	d103      	bne.n	8002964 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fa44 	bl	8002dea <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002962:	e0c7      	b.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	f040 80c4 	bne.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fab2 	bl	8002ed6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002972:	e0bf      	b.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002982:	f000 80b7 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00f      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x194>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a9b      	lsrs	r3, r3, #10
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x194>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fb27 	bl	8002ffe <I2C_MasterReceive_RXNE>
 80029b0:	e011      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 809a 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	0a5b      	lsrs	r3, r3, #9
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8093 	beq.w	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fbc6 	bl	8003160 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d4:	e08e      	b.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029d6:	e08d      	b.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	e007      	b.n	80029fa <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d012      	beq.n	8002a2c <HAL_I2C_EV_IRQHandler+0x20e>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 ff84 	bl	8003932 <I2C_Slave_ADDR>
 8002a2a:	e066      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_I2C_EV_IRQHandler+0x22e>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	0a5b      	lsrs	r3, r3, #9
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 ffbf 	bl	80039c8 <I2C_Slave_STOPF>
 8002a4a:	e056      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a4c:	7bbb      	ldrb	r3, [r7, #14]
 8002a4e:	2b21      	cmp	r3, #33	; 0x21
 8002a50:	d002      	beq.n	8002a58 <HAL_I2C_EV_IRQHandler+0x23a>
 8002a52:	7bbb      	ldrb	r3, [r7, #14]
 8002a54:	2b29      	cmp	r3, #41	; 0x29
 8002a56:	d125      	bne.n	8002aa4 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	09db      	lsrs	r3, r3, #7
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00f      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x266>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d009      	beq.n	8002a84 <HAL_I2C_EV_IRQHandler+0x266>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fe9a 	bl	80037b6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a82:	e039      	b.n	8002af8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d033      	beq.n	8002af8 <HAL_I2C_EV_IRQHandler+0x2da>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02d      	beq.n	8002af8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fec7 	bl	8003830 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa2:	e029      	b.n	8002af8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fed2 	bl	8003872 <I2C_SlaveReceive_RXNE>
 8002ace:	e014      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 ff00 	bl	80038ee <I2C_SlaveReceive_BTF>
 8002aee:	e004      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002af0:	bf00      	nop
 8002af2:	e002      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002af8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b22:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00e      	beq.n	8002b4e <HAL_I2C_ER_IRQHandler+0x4e>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b4c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <HAL_I2C_ER_IRQHandler+0x78>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	0a9b      	lsrs	r3, r3, #10
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d03f      	beq.n	8002c04 <HAL_I2C_ER_IRQHandler+0x104>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d039      	beq.n	8002c04 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002b90:	7efb      	ldrb	r3, [r7, #27]
 8002b92:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002baa:	7ebb      	ldrb	r3, [r7, #26]
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d112      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d008      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b29      	cmp	r3, #41	; 0x29
 8002bc0:	d005      	beq.n	8002bce <HAL_I2C_ER_IRQHandler+0xce>
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b28      	cmp	r3, #40	; 0x28
 8002bc6:	d106      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b21      	cmp	r3, #33	; 0x21
 8002bcc:	d103      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f001 f82a 	bl	8003c28 <I2C_Slave_AF>
 8002bd4:	e016      	b.n	8002c04 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bde:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002be8:	7efb      	ldrb	r3, [r7, #27]
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d002      	beq.n	8002bf4 <HAL_I2C_ER_IRQHandler+0xf4>
 8002bee:	7efb      	ldrb	r3, [r7, #27]
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d107      	bne.n	8002c04 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	0adb      	lsrs	r3, r3, #11
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_I2C_ER_IRQHandler+0x12e>
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f043 0308 	orr.w	r3, r3, #8
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c2c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f001 f861 	bl	8003d08 <I2C_ITError>
  }
}
 8002c46:	bf00      	nop
 8002c48:	3728      	adds	r7, #40	; 0x28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d150      	bne.n	8002d7a <I2C_MasterTransmit_TXE+0xc8>
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b21      	cmp	r3, #33	; 0x21
 8002cdc:	d14d      	bne.n	8002d7a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d01d      	beq.n	8002d20 <I2C_MasterTransmit_TXE+0x6e>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d01a      	beq.n	8002d20 <I2C_MasterTransmit_TXE+0x6e>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cf0:	d016      	beq.n	8002d20 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d00:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2211      	movs	r2, #17
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff98 	bl	8002c4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d1e:	e060      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d107      	bne.n	8002d6a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff87 	bl	8002c76 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d68:	e03b      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff6b 	bl	8002c4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d78:	e033      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	2b21      	cmp	r3, #33	; 0x21
 8002d7e:	d005      	beq.n	8002d8c <I2C_MasterTransmit_TXE+0xda>
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d12d      	bne.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b22      	cmp	r3, #34	; 0x22
 8002d8a:	d12a      	bne.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002da6:	e01c      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d103      	bne.n	8002dbc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f88e 	bl	8002ed6 <I2C_MemoryTransmit_TXE_BTF>
}
 8002dba:	e012      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002de0:	e7ff      	b.n	8002de2 <I2C_MasterTransmit_TXE+0x130>
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b21      	cmp	r3, #33	; 0x21
 8002e02:	d164      	bne.n	8002ece <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e32:	e04c      	b.n	8002ece <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d01d      	beq.n	8002e76 <I2C_MasterTransmit_BTF+0x8c>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d01a      	beq.n	8002e76 <I2C_MasterTransmit_BTF+0x8c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e46:	d016      	beq.n	8002e76 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e56:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2211      	movs	r2, #17
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff feed 	bl	8002c4e <HAL_I2C_MasterTxCpltCallback>
}
 8002e74:	e02b      	b.n	8002ece <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e84:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d107      	bne.n	8002ec0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fedc 	bl	8002c76 <HAL_I2C_MemTxCpltCallback>
}
 8002ebe:	e006      	b.n	8002ece <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fec0 	bl	8002c4e <HAL_I2C_MasterTxCpltCallback>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11d      	bne.n	8002f2a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10b      	bne.n	8002f0e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	1c9a      	adds	r2, r3, #2
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f0c:	e073      	b.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	121b      	asrs	r3, r3, #8
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f28:	e065      	b.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10b      	bne.n	8002f4a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f48:	e055      	b.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d151      	bne.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b22      	cmp	r3, #34	; 0x22
 8002f56:	d10d      	bne.n	8002f74 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f66:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f72:	e040      	b.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b21      	cmp	r3, #33	; 0x21
 8002f82:	d112      	bne.n	8002faa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fa8:	e025      	b.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d120      	bne.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b21      	cmp	r3, #33	; 0x21
 8002fb8:	d11d      	bne.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fe40 	bl	8002c76 <HAL_I2C_MemTxCpltCallback>
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b22      	cmp	r3, #34	; 0x22
 8003010:	f040 80a2 	bne.w	8003158 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d921      	bls.n	8003066 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b03      	cmp	r3, #3
 8003050:	f040 8082 	bne.w	8003158 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003064:	e078      	b.n	8003158 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	2b02      	cmp	r3, #2
 800306c:	d074      	beq.n	8003158 <I2C_MasterReceive_RXNE+0x15a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <I2C_MasterReceive_RXNE+0x7c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d16e      	bne.n	8003158 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f001 f81e 	bl	80040bc <I2C_WaitOnSTOPRequestThroughIT>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d142      	bne.n	800310c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d10a      	bne.n	80030f6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fdcb 	bl	8002c8a <HAL_I2C_MemRxCpltCallback>
}
 80030f4:	e030      	b.n	8003158 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2212      	movs	r2, #18
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fdac 	bl	8002c62 <HAL_I2C_MasterRxCpltCallback>
}
 800310a:	e025      	b.n	8003158 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800311a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe f8b2 	bl	80012bc <HAL_I2C_ErrorCallback>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b04      	cmp	r3, #4
 8003176:	d11b      	bne.n	80031b0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003186:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80031ae:	e0bd      	b.n	800332c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d129      	bne.n	800320e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d00a      	beq.n	80031e6 <I2C_MasterReceive_BTF+0x86>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d007      	beq.n	80031e6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800320c:	e08e      	b.n	800332c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d176      	bne.n	8003306 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d002      	beq.n	8003224 <I2C_MasterReceive_BTF+0xc4>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d108      	bne.n	8003236 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e019      	b.n	800326a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d002      	beq.n	8003242 <I2C_MasterReceive_BTF+0xe2>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d108      	bne.n	8003254 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e00a      	b.n	800326a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b10      	cmp	r3, #16
 8003258:	d007      	beq.n	800326a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d10a      	bne.n	80032f0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fcce 	bl	8002c8a <HAL_I2C_MemRxCpltCallback>
}
 80032ee:	e01d      	b.n	800332c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2212      	movs	r2, #18
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff fcaf 	bl	8002c62 <HAL_I2C_MasterRxCpltCallback>
}
 8003304:	e012      	b.n	800332c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d117      	bne.n	8003378 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003360:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003362:	e067      	b.n	8003434 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]
}
 8003376:	e05d      	b.n	8003434 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d133      	bne.n	80033ea <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b21      	cmp	r3, #33	; 0x21
 800338c:	d109      	bne.n	80033a2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800339e:	611a      	str	r2, [r3, #16]
 80033a0:	e008      	b.n	80033b4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <I2C_Master_SB+0x92>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d032      	beq.n	8003434 <I2C_Master_SB+0x100>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02d      	beq.n	8003434 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e6:	605a      	str	r2, [r3, #4]
}
 80033e8:	e024      	b.n	8003434 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10e      	bne.n	8003410 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	11db      	asrs	r3, r3, #7
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 0306 	and.w	r3, r3, #6
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f063 030f 	orn	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]
}
 800340e:	e011      	b.n	8003434 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10d      	bne.n	8003434 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	b29b      	uxth	r3, r3
 800341e:	11db      	asrs	r3, r3, #7
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0306 	and.w	r3, r3, #6
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f063 030e 	orn	r3, r3, #14
 800342c:	b2da      	uxtb	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	b2da      	uxtb	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <I2C_Master_ADD10+0x26>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <I2C_Master_ADD10+0x48>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003486:	605a      	str	r2, [r3, #4]
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003494:	b480      	push	{r7}
 8003496:	b091      	sub	sp, #68	; 0x44
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b22      	cmp	r3, #34	; 0x22
 80034bc:	f040 8169 	bne.w	8003792 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <I2C_Master_ADDR+0x54>
 80034c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d10b      	bne.n	80034e8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	633b      	str	r3, [r7, #48]	; 0x30
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	e160      	b.n	80037aa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11d      	bne.n	800352c <I2C_Master_ADDR+0x98>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034f8:	d118      	bne.n	800352c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	651a      	str	r2, [r3, #80]	; 0x50
 800352a:	e13e      	b.n	80037aa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e115      	b.n	800378a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 808a 	bne.w	800367e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003570:	d137      	bne.n	80035e2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003580:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003590:	d113      	bne.n	80035ba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	e0e7      	b.n	800378a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e0d3      	b.n	800378a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d02e      	beq.n	8003646 <I2C_Master_ADDR+0x1b2>
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d02b      	beq.n	8003646 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	2b12      	cmp	r3, #18
 80035f2:	d102      	bne.n	80035fa <I2C_Master_ADDR+0x166>
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d125      	bne.n	8003646 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00e      	beq.n	800361e <I2C_Master_ADDR+0x18a>
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	2b02      	cmp	r3, #2
 8003604:	d00b      	beq.n	800361e <I2C_Master_ADDR+0x18a>
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2b10      	cmp	r3, #16
 800360a:	d008      	beq.n	800361e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e007      	b.n	800362e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800362c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	e0a1      	b.n	800378a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003654:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e085      	b.n	800378a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d14d      	bne.n	8003724 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	2b04      	cmp	r3, #4
 800368c:	d016      	beq.n	80036bc <I2C_Master_ADDR+0x228>
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	2b02      	cmp	r3, #2
 8003692:	d013      	beq.n	80036bc <I2C_Master_ADDR+0x228>
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	2b10      	cmp	r3, #16
 8003698:	d010      	beq.n	80036bc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036da:	d117      	bne.n	800370c <I2C_Master_ADDR+0x278>
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e2:	d00b      	beq.n	80036fc <I2C_Master_ADDR+0x268>
 80036e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d008      	beq.n	80036fc <I2C_Master_ADDR+0x268>
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d005      	beq.n	80036fc <I2C_Master_ADDR+0x268>
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d002      	beq.n	80036fc <I2C_Master_ADDR+0x268>
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d107      	bne.n	800370c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800370a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	e032      	b.n	800378a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003732:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003742:	d117      	bne.n	8003774 <I2C_Master_ADDR+0x2e0>
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800374a:	d00b      	beq.n	8003764 <I2C_Master_ADDR+0x2d0>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2b01      	cmp	r3, #1
 8003750:	d008      	beq.n	8003764 <I2C_Master_ADDR+0x2d0>
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b08      	cmp	r3, #8
 8003756:	d005      	beq.n	8003764 <I2C_Master_ADDR+0x2d0>
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b10      	cmp	r3, #16
 800375c:	d002      	beq.n	8003764 <I2C_Master_ADDR+0x2d0>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	2b20      	cmp	r3, #32
 8003762:	d107      	bne.n	8003774 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003772:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003790:	e00b      	b.n	80037aa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
}
 80037a8:	e7ff      	b.n	80037aa <I2C_Master_ADDR+0x316>
 80037aa:	bf00      	nop
 80037ac:	3744      	adds	r7, #68	; 0x44
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d02b      	beq.n	8003828 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d114      	bne.n	8003828 <I2C_SlaveTransmit_TXE+0x72>
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b29      	cmp	r3, #41	; 0x29
 8003802:	d111      	bne.n	8003828 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003812:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2228      	movs	r2, #40	; 0x28
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fd16 	bl	8001254 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02c      	beq.n	80038e6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d114      	bne.n	80038e6 <I2C_SlaveReceive_RXNE+0x74>
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b2a      	cmp	r3, #42	; 0x2a
 80038c0:	d111      	bne.n	80038e6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2222      	movs	r2, #34	; 0x22
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2228      	movs	r2, #40	; 0x28
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fd fcc5 	bl	8001270 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800394c:	2b28      	cmp	r3, #40	; 0x28
 800394e:	d127      	bne.n	80039a0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	089b      	lsrs	r3, r3, #2
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	09db      	lsrs	r3, r3, #7
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d103      	bne.n	8003984 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	81bb      	strh	r3, [r7, #12]
 8003982:	e002      	b.n	800398a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003992:	89ba      	ldrh	r2, [r7, #12]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd fc77 	bl	800128c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800399e:	e00e      	b.n	80039be <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d172      	bne.n	8003b0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	2b22      	cmp	r3, #34	; 0x22
 8003a2a:	d002      	beq.n	8003a32 <I2C_Slave_STOPF+0x6a>
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d135      	bne.n	8003a9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f043 0204 	orr.w	r2, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fb0b 	bl	8002086 <HAL_DMA_GetState>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d049      	beq.n	8003b0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a69      	ldr	r2, [pc, #420]	; (8003c20 <I2C_Slave_STOPF+0x258>)
 8003a7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fadd 	bl	8002042 <HAL_DMA_Abort_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03d      	beq.n	8003b0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a9c:	e035      	b.n	8003b0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fad5 	bl	8002086 <HAL_DMA_GetState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d014      	beq.n	8003b0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <I2C_Slave_STOPF+0x258>)
 8003ae8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe faa7 	bl	8002042 <HAL_DMA_Abort_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b04:	4610      	mov	r0, r2
 8003b06:	4798      	blx	r3
 8003b08:	e000      	b.n	8003b0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03e      	beq.n	8003b94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d112      	bne.n	8003b4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d112      	bne.n	8003b7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0204 	orr.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8b3 	bl	8003d08 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003ba2:	e039      	b.n	8003c18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ba8:	d109      	bne.n	8003bbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2228      	movs	r2, #40	; 0x28
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd fb59 	bl	8001270 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b28      	cmp	r3, #40	; 0x28
 8003bc8:	d111      	bne.n	8003bee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <I2C_Slave_STOPF+0x25c>)
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fd fb26 	bl	8001238 <HAL_I2C_ListenCpltCallback>
}
 8003bec:	e014      	b.n	8003c18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	2b22      	cmp	r3, #34	; 0x22
 8003bf4:	d002      	beq.n	8003bfc <I2C_Slave_STOPF+0x234>
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b22      	cmp	r3, #34	; 0x22
 8003bfa:	d10d      	bne.n	8003c18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fb2c 	bl	8001270 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	08003f6d 	.word	0x08003f6d
 8003c24:	ffff0000 	.word	0xffff0000

08003c28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d002      	beq.n	8003c4a <I2C_Slave_AF+0x22>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d129      	bne.n	8003c9e <I2C_Slave_AF+0x76>
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d126      	bne.n	8003c9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <I2C_Slave_AF+0xdc>)
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd face 	bl	8001238 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c9c:	e02e      	b.n	8003cfc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b21      	cmp	r3, #33	; 0x21
 8003ca2:	d126      	bne.n	8003cf2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <I2C_Slave_AF+0xdc>)
 8003ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2221      	movs	r2, #33	; 0x21
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fab2 	bl	8001254 <HAL_I2C_SlaveTxCpltCallback>
}
 8003cf0:	e004      	b.n	8003cfc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cfa:	615a      	str	r2, [r3, #20]
}
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffff0000 	.word	0xffff0000

08003d08 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d20:	7bbb      	ldrb	r3, [r7, #14]
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d002      	beq.n	8003d2c <I2C_ITError+0x24>
 8003d26:	7bbb      	ldrb	r3, [r7, #14]
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d10a      	bne.n	8003d42 <I2C_ITError+0x3a>
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b22      	cmp	r3, #34	; 0x22
 8003d30:	d107      	bne.n	8003d42 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	d107      	bne.n	8003d5c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2228      	movs	r2, #40	; 0x28
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d5a:	e015      	b.n	8003d88 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6a:	d00a      	beq.n	8003d82 <I2C_ITError+0x7a>
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b60      	cmp	r3, #96	; 0x60
 8003d70:	d007      	beq.n	8003d82 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d96:	d162      	bne.n	8003e5e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d020      	beq.n	8003df8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <I2C_ITError+0x25c>)
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe f93d 	bl	8002042 <HAL_DMA_Abort_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8089 	beq.w	8003ee2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003df2:	4610      	mov	r0, r2
 8003df4:	4798      	blx	r3
 8003df6:	e074      	b.n	8003ee2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	4a59      	ldr	r2, [pc, #356]	; (8003f64 <I2C_ITError+0x25c>)
 8003dfe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe f91c 	bl	8002042 <HAL_DMA_Abort_IT>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d068      	beq.n	8003ee2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d10b      	bne.n	8003e36 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4798      	blx	r3
 8003e5c:	e041      	b.n	8003ee2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b60      	cmp	r3, #96	; 0x60
 8003e68:	d125      	bne.n	8003eb6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d10b      	bne.n	8003e9e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe fef5 	bl	8002c9e <HAL_I2C_AbortCpltCallback>
 8003eb4:	e015      	b.n	8003ee2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d10b      	bne.n	8003edc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fd f9ed 	bl	80012bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d104      	bne.n	8003f10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d113      	bne.n	8003f5c <I2C_ITError+0x254>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d110      	bne.n	8003f5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <I2C_ITError+0x260>)
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd f96e 	bl	8001238 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	08003f6d 	.word	0x08003f6d
 8003f68:	ffff0000 	.word	0xffff0000

08003f6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f86:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <I2C_DMAAbort+0x148>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	08db      	lsrs	r3, r3, #3
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <I2C_DMAAbort+0x14c>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0a1a      	lsrs	r2, r3, #8
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00da      	lsls	r2, r3, #3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003fb2:	e00a      	b.n	8003fca <I2C_DMAAbort+0x5e>
    }
    count--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc8:	d0ea      	beq.n	8003fa0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	2200      	movs	r2, #0
 800400e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b60      	cmp	r3, #96	; 0x60
 800403a:	d10e      	bne.n	800405a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7fe fe23 	bl	8002c9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004058:	e027      	b.n	80040aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004060:	2b28      	cmp	r3, #40	; 0x28
 8004062:	d117      	bne.n	8004094 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2228      	movs	r2, #40	; 0x28
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004092:	e007      	b.n	80040a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040a4:	6978      	ldr	r0, [r7, #20]
 80040a6:	f7fd f909 	bl	80012bc <HAL_I2C_ErrorCallback>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000048 	.word	0x20000048
 80040b8:	14f8b589 	.word	0x14f8b589

080040bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	0a1a      	lsrs	r2, r3, #8
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d107      	bne.n	80040fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e008      	b.n	800410c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d0e9      	beq.n	80040de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000048 	.word	0x20000048
 800411c:	14f8b589 	.word	0x14f8b589

08004120 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004130:	d103      	bne.n	800413a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004138:	e007      	b.n	800414a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004142:	d102      	bne.n	800414a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2208      	movs	r2, #8
 8004148:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e264      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d075      	beq.n	8004262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004176:	4ba3      	ldr	r3, [pc, #652]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b04      	cmp	r3, #4
 8004180:	d00c      	beq.n	800419c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004182:	4ba0      	ldr	r3, [pc, #640]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418a:	2b08      	cmp	r3, #8
 800418c:	d112      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800418e:	4b9d      	ldr	r3, [pc, #628]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419a:	d10b      	bne.n	80041b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800419c:	4b99      	ldr	r3, [pc, #612]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d05b      	beq.n	8004260 <HAL_RCC_OscConfig+0x108>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d157      	bne.n	8004260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e23f      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_OscConfig+0x74>
 80041be:	4b91      	ldr	r3, [pc, #580]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a90      	ldr	r2, [pc, #576]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e01d      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x98>
 80041d6:	4b8b      	ldr	r3, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a8a      	ldr	r2, [pc, #552]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a87      	ldr	r2, [pc, #540]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0xb0>
 80041f0:	4b84      	ldr	r3, [pc, #528]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a83      	ldr	r2, [pc, #524]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b81      	ldr	r3, [pc, #516]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fd fb74 	bl	80018fc <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004218:	f7fd fb70 	bl	80018fc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e204      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0xc0>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd fb60 	bl	80018fc <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004240:	f7fd fb5c 	bl	80018fc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1f0      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0xe8>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d063      	beq.n	8004336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426e:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427a:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d11c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004286:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d116      	bne.n	80042c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004292:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e1c4      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042aa:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	4952      	ldr	r1, [pc, #328]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	e03a      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <HAL_RCC_OscConfig+0x2b0>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fd fb15 	bl	80018fc <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fd fb11 	bl	80018fc <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e1a5      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4940      	ldr	r1, [pc, #256]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <HAL_RCC_OscConfig+0x2b0>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd faf4 	bl	80018fc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004318:	f7fd faf0 	bl	80018fc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e184      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432a:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d030      	beq.n	80043a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434a:	4b30      	ldr	r3, [pc, #192]	; (800440c <HAL_RCC_OscConfig+0x2b4>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fd fad4 	bl	80018fc <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004358:	f7fd fad0 	bl	80018fc <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e164      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436a:	4b26      	ldr	r3, [pc, #152]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x200>
 8004376:	e015      	b.n	80043a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <HAL_RCC_OscConfig+0x2b4>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fd fabd 	bl	80018fc <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004386:	f7fd fab9 	bl	80018fc <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e14d      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004398:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a0 	beq.w	80044f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	60bb      	str	r3, [r7, #8]
 80043dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_OscConfig+0x2b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d121      	bne.n	8004432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_RCC_OscConfig+0x2b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a07      	ldr	r2, [pc, #28]	; (8004410 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fa:	f7fd fa7f 	bl	80018fc <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004400:	e011      	b.n	8004426 <HAL_RCC_OscConfig+0x2ce>
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
 8004410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004414:	f7fd fa72 	bl	80018fc <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e106      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCC_OscConfig+0x4e4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d106      	bne.n	8004448 <HAL_RCC_OscConfig+0x2f0>
 800443a:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a80      	ldr	r2, [pc, #512]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
 8004446:	e01c      	b.n	8004482 <HAL_RCC_OscConfig+0x32a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d10c      	bne.n	800446a <HAL_RCC_OscConfig+0x312>
 8004450:	4b7b      	ldr	r3, [pc, #492]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	4a7a      	ldr	r2, [pc, #488]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	6713      	str	r3, [r2, #112]	; 0x70
 800445c:	4b78      	ldr	r3, [pc, #480]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	4a77      	ldr	r2, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004462:	f043 0301 	orr.w	r3, r3, #1
 8004466:	6713      	str	r3, [r2, #112]	; 0x70
 8004468:	e00b      	b.n	8004482 <HAL_RCC_OscConfig+0x32a>
 800446a:	4b75      	ldr	r3, [pc, #468]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	4a74      	ldr	r2, [pc, #464]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6713      	str	r3, [r2, #112]	; 0x70
 8004476:	4b72      	ldr	r3, [pc, #456]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4a71      	ldr	r2, [pc, #452]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d015      	beq.n	80044b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fd fa37 	bl	80018fc <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fd fa33 	bl	80018fc <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0c5      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a8:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0ee      	beq.n	8004492 <HAL_RCC_OscConfig+0x33a>
 80044b4:	e014      	b.n	80044e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7fd fa21 	bl	80018fc <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fd fa1d 	bl	80018fc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0af      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1ee      	bne.n	80044be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4b56      	ldr	r3, [pc, #344]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a55      	ldr	r2, [pc, #340]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 809b 	beq.w	8004632 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d05c      	beq.n	80045c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d141      	bne.n	8004594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004510:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCC_OscConfig+0x4ec>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fd f9f1 	bl	80018fc <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451e:	f7fd f9ed 	bl	80018fc <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e081      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004530:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	019b      	lsls	r3, r3, #6
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	3b01      	subs	r3, #1
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	061b      	lsls	r3, r3, #24
 8004560:	4937      	ldr	r1, [pc, #220]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004566:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_RCC_OscConfig+0x4ec>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd f9c6 	bl	80018fc <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd f9c2 	bl	80018fc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e056      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004586:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x41c>
 8004592:	e04e      	b.n	8004632 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fd f9af 	bl	80018fc <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fd f9ab 	bl	80018fc <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e03f      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x44a>
 80045c0:	e037      	b.n	8004632 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e032      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <HAL_RCC_OscConfig+0x4e8>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d028      	beq.n	800462e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d121      	bne.n	800462e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d11a      	bne.n	800462e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045fe:	4013      	ands	r3, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004604:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	3b01      	subs	r3, #1
 8004618:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d107      	bne.n	800462e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40007000 	.word	0x40007000
 8004640:	40023800 	.word	0x40023800
 8004644:	42470060 	.word	0x42470060

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fd f8e0 	bl	80018fc <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fd f8dc 	bl	80018fc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f821 	bl	8004814 <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd f840 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	08005ecc 	.word	0x08005ecc
 800480c:	20000048 	.word	0x20000048
 8004810:	2000004c 	.word	0x2000004c

08004814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004814:	b5b0      	push	{r4, r5, r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800481a:	2100      	movs	r1, #0
 800481c:	6079      	str	r1, [r7, #4]
 800481e:	2100      	movs	r1, #0
 8004820:	60f9      	str	r1, [r7, #12]
 8004822:	2100      	movs	r1, #0
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004826:	2100      	movs	r1, #0
 8004828:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482a:	4952      	ldr	r1, [pc, #328]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 800482c:	6889      	ldr	r1, [r1, #8]
 800482e:	f001 010c 	and.w	r1, r1, #12
 8004832:	2908      	cmp	r1, #8
 8004834:	d00d      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x3e>
 8004836:	2908      	cmp	r1, #8
 8004838:	f200 8094 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x150>
 800483c:	2900      	cmp	r1, #0
 800483e:	d002      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x32>
 8004840:	2904      	cmp	r1, #4
 8004842:	d003      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x38>
 8004844:	e08e      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004846:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <HAL_RCC_GetSysClockFreq+0x164>)
 8004848:	60bb      	str	r3, [r7, #8]
       break;
 800484a:	e08e      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <HAL_RCC_GetSysClockFreq+0x168>)
 800484e:	60bb      	str	r3, [r7, #8]
      break;
 8004850:	e08b      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004852:	4948      	ldr	r1, [pc, #288]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 8004854:	6849      	ldr	r1, [r1, #4]
 8004856:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800485a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800485c:	4945      	ldr	r1, [pc, #276]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 800485e:	6849      	ldr	r1, [r1, #4]
 8004860:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004864:	2900      	cmp	r1, #0
 8004866:	d024      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004868:	4942      	ldr	r1, [pc, #264]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 800486a:	6849      	ldr	r1, [r1, #4]
 800486c:	0989      	lsrs	r1, r1, #6
 800486e:	4608      	mov	r0, r1
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004878:	f04f 0500 	mov.w	r5, #0
 800487c:	ea00 0204 	and.w	r2, r0, r4
 8004880:	ea01 0305 	and.w	r3, r1, r5
 8004884:	493d      	ldr	r1, [pc, #244]	; (800497c <HAL_RCC_GetSysClockFreq+0x168>)
 8004886:	fb01 f003 	mul.w	r0, r1, r3
 800488a:	2100      	movs	r1, #0
 800488c:	fb01 f102 	mul.w	r1, r1, r2
 8004890:	1844      	adds	r4, r0, r1
 8004892:	493a      	ldr	r1, [pc, #232]	; (800497c <HAL_RCC_GetSysClockFreq+0x168>)
 8004894:	fba2 0101 	umull	r0, r1, r2, r1
 8004898:	1863      	adds	r3, r4, r1
 800489a:	4619      	mov	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	461a      	mov	r2, r3
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	f7fb fc96 	bl	80001d4 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e04a      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	ea02 0400 	and.w	r4, r2, r0
 80048ca:	ea03 0501 	and.w	r5, r3, r1
 80048ce:	4620      	mov	r0, r4
 80048d0:	4629      	mov	r1, r5
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048e0:	0142      	lsls	r2, r0, #5
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	eb61 0105 	sbc.w	r1, r1, r5
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	018b      	lsls	r3, r1, #6
 80048f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048fa:	0182      	lsls	r2, r0, #6
 80048fc:	1a12      	subs	r2, r2, r0
 80048fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004902:	f04f 0000 	mov.w	r0, #0
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	00d9      	lsls	r1, r3, #3
 800490c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004910:	00d0      	lsls	r0, r2, #3
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1912      	adds	r2, r2, r4
 8004918:	eb45 0303 	adc.w	r3, r5, r3
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0299      	lsls	r1, r3, #10
 8004926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800492a:	0290      	lsls	r0, r2, #10
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	461a      	mov	r2, r3
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	f7fb fc4a 	bl	80001d4 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_RCC_GetSysClockFreq+0x160>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_RCC_GetSysClockFreq+0x164>)
 8004966:	60bb      	str	r3, [r7, #8]
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	68bb      	ldr	r3, [r7, #8]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bdb0      	pop	{r4, r5, r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	00f42400 	.word	0x00f42400
 800497c:	017d7840 	.word	0x017d7840

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <HAL_RCC_GetHCLKFreq+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000048 	.word	0x20000048

08004998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800499c:	f7ff fff0 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0a9b      	lsrs	r3, r3, #10
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4903      	ldr	r1, [pc, #12]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	08005edc 	.word	0x08005edc

080049c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07b      	b.n	8004aca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e2:	d009      	beq.n	80049f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]
 80049ea:	e005      	b.n	80049f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fd2c 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	ea42 0103 	orr.w	r1, r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	0c1b      	lsrs	r3, r3, #16
 8004a96:	f003 0104 	and.w	r1, r3, #4
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0210 	and.w	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e041      	b.n	8004b68 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc fd43 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f000 fcad 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e044      	b.n	8004c12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x6c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d013      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x6c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	; (8004c24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x6c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_TIM_Base_Start_IT+0xb8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x6c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0x6c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	; (8004c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d111      	bne.n	8004c00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d010      	beq.n	8004c10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0201 	orr.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfe:	e007      	b.n	8004c10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40014000 	.word	0x40014000

08004c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e041      	b.n	8004cca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fc fc70 	bl	8001540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f000 fbfc 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_TIM_PWM_Start+0x24>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e022      	b.n	8004d3e <HAL_TIM_PWM_Start+0x6a>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d109      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x3e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e015      	b.n	8004d3e <HAL_TIM_PWM_Start+0x6a>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d109      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x58>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e008      	b.n	8004d3e <HAL_TIM_PWM_Start+0x6a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e068      	b.n	8004e18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_PWM_Start+0x82>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d54:	e013      	b.n	8004d7e <HAL_TIM_PWM_Start+0xaa>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x92>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d64:	e00b      	b.n	8004d7e <HAL_TIM_PWM_Start+0xaa>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_PWM_Start+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d74:	e003      	b.n	8004d7e <HAL_TIM_PWM_Start+0xaa>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2201      	movs	r2, #1
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fe18 	bl	80059bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_TIM_PWM_Start+0x14c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_TIM_PWM_Start+0x14c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d018      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x10e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db8:	d013      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x10e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <HAL_TIM_PWM_Start+0x150>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x10e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <HAL_TIM_PWM_Start+0x154>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x10e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_TIM_PWM_Start+0x158>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x10e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <HAL_TIM_PWM_Start+0x15c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d111      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d010      	beq.n	8004e16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e04:	e007      	b.n	8004e16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40014000 	.word	0x40014000

08004e34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fdb8 	bl	80059bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a29      	ldr	r2, [pc, #164]	; (8004ef8 <HAL_TIM_PWM_Stop+0xc4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d117      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0x52>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	f240 4344 	movw	r3, #1092	; 0x444
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_PWM_Stop+0x52>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a1a      	ldr	r2, [r3, #32]
 8004e8c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10f      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0x82>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	f240 4344 	movw	r3, #1092	; 0x444
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0x82>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Stop+0x92>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec4:	e013      	b.n	8004eee <HAL_TIM_PWM_Stop+0xba>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Stop+0xa2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_PWM_Stop+0xba>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Stop+0xb2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_PWM_Stop+0xba>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40010000 	.word	0x40010000

08004efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0202 	mvn.w	r2, #2
 8004f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fa77 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa69 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fa7a 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0204 	mvn.w	r2, #4
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fa4d 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fa3f 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fa50 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d122      	bne.n	8005000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d11b      	bne.n	8005000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0208 	mvn.w	r2, #8
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fa23 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa15 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa26 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d122      	bne.n	8005054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b10      	cmp	r3, #16
 800501a:	d11b      	bne.n	8005054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0210 	mvn.w	r2, #16
 8005024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2208      	movs	r2, #8
 800502a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9f9 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8005040:	e005      	b.n	800504e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9eb 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9fc 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10e      	bne.n	8005080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0201 	mvn.w	r2, #1
 8005078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fb fe72 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d10e      	bne.n	80050ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d107      	bne.n	80050ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fe82 	bl	8005db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f9c1 	bl	800545a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0220 	mvn.w	r2, #32
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fe4c 	bl	8005d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005126:	2302      	movs	r3, #2
 8005128:	e0ae      	b.n	8005288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	f200 809f 	bhi.w	8005278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005175 	.word	0x08005175
 8005144:	08005279 	.word	0x08005279
 8005148:	08005279 	.word	0x08005279
 800514c:	08005279 	.word	0x08005279
 8005150:	080051b5 	.word	0x080051b5
 8005154:	08005279 	.word	0x08005279
 8005158:	08005279 	.word	0x08005279
 800515c:	08005279 	.word	0x08005279
 8005160:	080051f7 	.word	0x080051f7
 8005164:	08005279 	.word	0x08005279
 8005168:	08005279 	.word	0x08005279
 800516c:	08005279 	.word	0x08005279
 8005170:	08005237 	.word	0x08005237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f9f8 	bl	8005570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0208 	orr.w	r2, r2, #8
 800518e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6999      	ldr	r1, [r3, #24]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	619a      	str	r2, [r3, #24]
      break;
 80051b2:	e064      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fa3e 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	021a      	lsls	r2, r3, #8
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	619a      	str	r2, [r3, #24]
      break;
 80051f4:	e043      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fa89 	bl	8005714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69da      	ldr	r2, [r3, #28]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0208 	orr.w	r2, r2, #8
 8005210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69d9      	ldr	r1, [r3, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	61da      	str	r2, [r3, #28]
      break;
 8005234:	e023      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fad3 	bl	80057e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69d9      	ldr	r1, [r3, #28]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	021a      	lsls	r2, r3, #8
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	61da      	str	r2, [r3, #28]
      break;
 8005276:	e002      	b.n	800527e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005286:	7dfb      	ldrb	r3, [r7, #23]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_ConfigClockSource+0x1c>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e0b4      	b.n	8005416 <HAL_TIM_ConfigClockSource+0x186>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d03e      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0xd4>
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	f200 8087 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	f000 8086 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x172>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d87f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d01a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xa6>
 8005300:	2b70      	cmp	r3, #112	; 0x70
 8005302:	d87b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d050      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x11a>
 8005308:	2b60      	cmp	r3, #96	; 0x60
 800530a:	d877      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800530c:	2b50      	cmp	r3, #80	; 0x50
 800530e:	d03c      	beq.n	800538a <HAL_TIM_ConfigClockSource+0xfa>
 8005310:	2b50      	cmp	r3, #80	; 0x50
 8005312:	d873      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d058      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x13a>
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d86f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	d064      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005320:	2b30      	cmp	r3, #48	; 0x30
 8005322:	d86b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d060      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d867      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d05a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	e062      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6899      	ldr	r1, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f000 fb19 	bl	800597c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
      break;
 8005362:	e04f      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f000 fb02 	bl	800597c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005386:	609a      	str	r2, [r3, #8]
      break;
 8005388:	e03c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 fa76 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2150      	movs	r1, #80	; 0x50
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 facf 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053a8:	e02c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fa95 	bl	80058e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2160      	movs	r1, #96	; 0x60
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fabf 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053c8:	e01c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fa56 	bl	8005888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2140      	movs	r1, #64	; 0x40
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 faaf 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e00c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 faa6 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053fa:	e003      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e000      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a34      	ldr	r2, [pc, #208]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a31      	ldr	r2, [pc, #196]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a30      	ldr	r2, [pc, #192]	; (800555c <TIM_Base_SetConfig+0xec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <TIM_Base_SetConfig+0xf0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a25      	ldr	r2, [pc, #148]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01b      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d017      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <TIM_Base_SetConfig+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00f      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <TIM_Base_SetConfig+0xf0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <TIM_Base_SetConfig+0xf4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <TIM_Base_SetConfig+0xf8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <TIM_Base_SetConfig+0xfc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	615a      	str	r2, [r3, #20]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800

08005570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 0302 	bic.w	r3, r3, #2
 80055b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <TIM_OC1_SetConfig+0xc8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0308 	bic.w	r3, r3, #8
 80055d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <TIM_OC1_SetConfig+0xc8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40010000 	.word	0x40010000

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <TIM_OC2_SetConfig+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10d      	bne.n	80056b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <TIM_OC2_SetConfig+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d113      	bne.n	80056e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000

08005714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800575c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <TIM_OC3_SetConfig+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10d      	bne.n	800578e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <TIM_OC3_SetConfig+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d113      	bne.n	80057be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800579c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40010000 	.word	0x40010000

080057e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <TIM_OC4_SetConfig+0x9c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d109      	bne.n	800585c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800584e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	019b      	lsls	r3, r3, #6
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40010000 	.word	0x40010000

08005888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 030a 	bic.w	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	f043 0307 	orr.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	2201      	movs	r2, #1
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1a      	ldr	r2, [r3, #32]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_TIMEx_PWMN_Start+0x24>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e022      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d109      	bne.n	8005a46 <HAL_TIMEx_PWMN_Start+0x3e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e015      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIMEx_PWMN_Start+0x58>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e008      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e063      	b.n	8005b42 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIMEx_PWMN_Start+0x82>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a88:	e013      	b.n	8005ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIMEx_PWMN_Start+0x92>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a98:	e00b      	b.n	8005ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIMEx_PWMN_Start+0xa2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	e003      	b.n	8005ab2 <HAL_TIMEx_PWMN_Start+0xaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2204      	movs	r2, #4
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 f982 	bl	8005dc4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ace:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIMEx_PWMN_Start+0x144>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x104>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x104>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_TIMEx_PWMN_Start+0x148>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x104>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <HAL_TIMEx_PWMN_Start+0x14c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x104>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a16      	ldr	r2, [pc, #88]	; (8005b58 <HAL_TIMEx_PWMN_Start+0x150>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x104>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <HAL_TIMEx_PWMN_Start+0x154>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d111      	bne.n	8005b30 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d010      	beq.n	8005b40 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e007      	b.n	8005b40 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40014000 	.word	0x40014000

08005b60 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f926 	bl	8005dc4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10f      	bne.n	8005ba8 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	f240 4344 	movw	r3, #1092	; 0x444
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	f240 4344 	movw	r3, #1092	; 0x444
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_TIMEx_PWMN_Stop+0x78>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <HAL_TIMEx_PWMN_Stop+0x88>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005be6:	e013      	b.n	8005c10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d104      	bne.n	8005bf8 <HAL_TIMEx_PWMN_Stop+0x98>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf6:	e00b      	b.n	8005c10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d104      	bne.n	8005c08 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c06:	e003      	b.n	8005c10 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e050      	b.n	8005cd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d018      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d013      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00e      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a16      	ldr	r2, [pc, #88]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d009      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d004      	beq.n	8005caa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40014000 	.word	0x40014000

08005cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e03d      	b.n	8005d90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1a      	ldr	r2, [r3, #32]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	401a      	ands	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1a      	ldr	r2, [r3, #32]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <__libc_init_array>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	4d0d      	ldr	r5, [pc, #52]	; (8005e48 <__libc_init_array+0x38>)
 8005e14:	4c0d      	ldr	r4, [pc, #52]	; (8005e4c <__libc_init_array+0x3c>)
 8005e16:	1b64      	subs	r4, r4, r5
 8005e18:	10a4      	asrs	r4, r4, #2
 8005e1a:	2600      	movs	r6, #0
 8005e1c:	42a6      	cmp	r6, r4
 8005e1e:	d109      	bne.n	8005e34 <__libc_init_array+0x24>
 8005e20:	4d0b      	ldr	r5, [pc, #44]	; (8005e50 <__libc_init_array+0x40>)
 8005e22:	4c0c      	ldr	r4, [pc, #48]	; (8005e54 <__libc_init_array+0x44>)
 8005e24:	f000 f846 	bl	8005eb4 <_init>
 8005e28:	1b64      	subs	r4, r4, r5
 8005e2a:	10a4      	asrs	r4, r4, #2
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	42a6      	cmp	r6, r4
 8005e30:	d105      	bne.n	8005e3e <__libc_init_array+0x2e>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e38:	4798      	blx	r3
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7ee      	b.n	8005e1c <__libc_init_array+0xc>
 8005e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e42:	4798      	blx	r3
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7f2      	b.n	8005e2e <__libc_init_array+0x1e>
 8005e48:	08005eec 	.word	0x08005eec
 8005e4c:	08005eec 	.word	0x08005eec
 8005e50:	08005eec 	.word	0x08005eec
 8005e54:	08005ef0 	.word	0x08005ef0

08005e58 <memset>:
 8005e58:	4402      	add	r2, r0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d100      	bne.n	8005e62 <memset+0xa>
 8005e60:	4770      	bx	lr
 8005e62:	f803 1b01 	strb.w	r1, [r3], #1
 8005e66:	e7f9      	b.n	8005e5c <memset+0x4>

08005e68 <roundf>:
 8005e68:	ee10 0a10 	vmov	r0, s0
 8005e6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005e70:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005e74:	2a16      	cmp	r2, #22
 8005e76:	dc15      	bgt.n	8005ea4 <roundf+0x3c>
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	da08      	bge.n	8005e8e <roundf+0x26>
 8005e7c:	3201      	adds	r2, #1
 8005e7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005e82:	d101      	bne.n	8005e88 <roundf+0x20>
 8005e84:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8005e88:	ee00 3a10 	vmov	s0, r3
 8005e8c:	4770      	bx	lr
 8005e8e:	4908      	ldr	r1, [pc, #32]	; (8005eb0 <roundf+0x48>)
 8005e90:	4111      	asrs	r1, r2
 8005e92:	4208      	tst	r0, r1
 8005e94:	d0fa      	beq.n	8005e8c <roundf+0x24>
 8005e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e9a:	4113      	asrs	r3, r2
 8005e9c:	4403      	add	r3, r0
 8005e9e:	ea23 0301 	bic.w	r3, r3, r1
 8005ea2:	e7f1      	b.n	8005e88 <roundf+0x20>
 8005ea4:	2a80      	cmp	r2, #128	; 0x80
 8005ea6:	d1f1      	bne.n	8005e8c <roundf+0x24>
 8005ea8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	007fffff 	.word	0x007fffff

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
